version: '3.8'
services:
  db:
    container_name: ToDoManager_bd
    image: postgres:14.5-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - ${DB_PORT:-5432}:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $DB_USER" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - back_nw
  api:
    container_name: ToDoManager_api
    build: .
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      HOST: ${DB_HOST}
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
    ports:
      - "8000:8000"
    volumes:
      - .env:/app/.env
      - ./todo_manager/todo_manager:/app/todo_manager/todo_manager/
    depends_on:
      db:
        condition: service_healthy
    command: python3 todo_manager/manage.py runserver 0.0.0.0:8000
    networks:
      - front_nw
      - back_nw
  front:
    container_name: ToDoManager_front
    image: sermalenk/skypro-front:lesson-38
    restart: always
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./todo_manager/static/:/opt/static/
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_started
    networks:
      - front_nw
  bot:
    container_name: ToDoManager_bot
    build: .
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
      HOST: ${DB_HOST}
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - .env:/app/.env
    depends_on:

      db:
        condition: service_healthy
      api:
        condition: service_started
    command: python3 todo_manager/manage.py runbot
    networks:
      - back_nw
volumes:
  postgres_data:
networks:
  back_nw:
    driver: bridge
  front_nw:
    driver: bridge